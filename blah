import csv

def read_penguin_data(file):
    with open(file) as inFile:
        lines = inFile.readlines()
    year_d = {}
    lines = lines[1:]
    for line in lines:
        values = line.rstrip().split(',')
        try:
            species = values[1].strip('"') 
            island = values[2].strip('"')
            bill_length = values[3]
            bill_depth = values[4]
            flipper = float(values[5])
            body_mass = float(values[6])
            sex = values[7].strip('"')
            year = int(values[8])
          
            values_d = {}
            values_d["species"] = species
            values_d["flipper_length_mm"] = flipper
            values_d["body_mass_g"] = body_mass
            
            if year not in year_d:
                year_d[year] = []
            year_d[year].append(values_d)
            
        except (ValueError, IndexError) as e:
            continue
    
    return year_d


def calculate_avg_flipper_by_year(data):
    avg_flipper = {}

    for year, penguins in data.items():
        total = 0
        count = 0
        for p in penguins:
            total += p["flipper_length_mm"]
            count += 1
        avg_flipper[year] = round(total / count, 2)

    return avg_flipper

def calculate_avg_body_mass_by_year(data):
    avg_mass = {}

    for year, penguins in data.items():
        total = 0
        count = 0
        for p in penguins:
            total += p["body_mass_g"]
            count += 1
        avg_mass[year] = round(total / count, 2)

    return avg_mass



def write_results_to_csv(results_flipper, results_mass):
    """Write the calculation results to a CSV file."""
    with open("penguin_results.csv", "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["Year", "Avg Flipper Length (mm)", "Avg Body Mass (g)"])
        for year in sorted(results_flipper.keys()):
            writer.writerow([
                year,
                results_flipper[year],
                results_mass.get(year, "N/A")
            ])
    print("Results written to penguin_results.csv")






import unittest
import os
            
class TestPenguinFunctions(unittest.TestCase):
    def setUp(self):
        self.sample_data = {
            2007: [
                {"species": "Adelie", "flipper_length_mm": 180.0, "body_mass_g": 3700.0},
                {"species": "Adelie", "flipper_length_mm": 190.0, "body_mass_g": 3800.0},
            ],
            2008: [
                {"species": "Gentoo", "flipper_length_mm": 200.0, "body_mass_g": 4100.0},
                {"species": "Gentoo", "flipper_length_mm": 210.0, "body_mass_g": 4200.0},
            ],
        }

    # ---------- read_penguin_data ----------
    def test_read_penguin_data_type(self):
        """Check that the function returns a dictionary."""
        result = read_penguin_data("penguins.csv")
        self.assertIsInstance(result, dict)

    def test_read_penguin_data_years(self):
        """Check that the years are integers."""
        result = read_penguin_data("penguins.csv")
        for year in result.keys():
            self.assertIsInstance(year, int)

    def test_read_penguin_data_contents(self):
        """Check that each year's list contains dictionaries."""
        result = read_penguin_data("penguins.csv")
        for year, penguins in result.items():
            self.assertIsInstance(penguins, list)
            if penguins:  # only check if list is not empty
                self.assertIsInstance(penguins[0], dict)

    def test_read_penguin_data_missing_data(self):
        """Ensure function skips rows with missing numeric data (edge case)."""
        result = read_penguin_data("penguins.csv")
        for year, penguins in result.items():
            for p in penguins:
                self.assertTrue("flipper_length_mm" in p)
                self.assertTrue("body_mass_g" in p)

    # ---------- calculate_avg_flipper_by_year ----------
    def test_avg_flipper_basic(self):
        """Check average flipper length calculation."""
        result = calculate_avg_flipper_by_year(self.sample_data)
        self.assertEqual(result[2007], 185.0)
        self.assertEqual(result[2008], 205.0)

    def test_avg_flipper_is_dict(self):
        """Ensure output is a dictionary."""
        result = calculate_avg_flipper_by_year(self.sample_data)
        self.assertIsInstance(result, dict)

    def test_avg_flipper_edge_empty(self):
        """Handle empty dataset gracefully."""
        result = calculate_avg_flipper_by_year({})
        self.assertEqual(result, {})

    def test_avg_flipper_single_entry(self):
        """Handle dataset with one penguin."""
        result = calculate_avg_flipper_by_year({
            2007: [{"flipper_length_mm": 180.0, "body_mass_g": 3500.0}]
        })
        self.assertEqual(result[2007], 180.0)

    # ---------- calculate_avg_body_mass_by_year ----------
    def test_avg_body_mass_basic(self):
        """Check average body mass calculation."""
        result = calculate_avg_body_mass_by_year(self.sample_data)
        self.assertEqual(result[2007], 3750.0)
        self.assertEqual(result[2008], 4150.0)

    def test_avg_body_mass_is_dict(self):
        """Ensure output is a dictionary."""
        result = calculate_avg_body_mass_by_year(self.sample_data)
        self.assertIsInstance(result, dict)

    def test_avg_body_mass_edge_empty(self):
        """Handle empty dataset gracefully."""
        result = calculate_avg_body_mass_by_year({})
        self.assertEqual(result, {})

    def test_avg_body_mass_single_entry(self):
        """Handle dataset with one penguin."""
        result = calculate_avg_body_mass_by_year({
            2009: [{"flipper_length_mm": 200.0, "body_mass_g": 4000.0}]
        })
        self.assertEqual(result[2009], 4000.0)

    # ---------- write_results_to_csv ----------
    def test_write_results_creates_file(self):
        """Check that CSV file is created."""
        results_flipper = {2007: 185.0}
        results_mass = {2007: 3750.0}
        write_results_to_csv(results_flipper, results_mass)
        self.assertTrue(os.path.exists("penguin_results.csv"))
        os.remove("penguin_results.csv")

    def test_write_results_file_contents(self):
        """Check that output CSV contains correct header."""
        results_flipper = {2007: 185.0}
        results_mass = {2007: 3750.0}
        write_results_to_csv(results_flipper, results_mass)
        with open("penguin_results.csv", newline="") as f:
            reader = csv.reader(f)
            header = next(reader)
            self.assertEqual(header, ["Year", "Avg Flipper Length (mm)", "Avg Body Mass (g)"])
        os.remove("penguin_results.csv")

def main():
    data = read_penguin_data("penguins.csv")
    results_flipper = calculate_avg_flipper_by_year(data)
    results_mass = calculate_avg_body_mass_by_year(data)
    write_results_to_csv(results_flipper, results_mass)

    print("Average Flipper Length per Year:", results_flipper)
    print("Average Body Mass per Year:", results_mass)

if __name__ == "__main__":
    main() 
    import unittest
    unittest.main()
